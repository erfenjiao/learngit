int candy(int* ratings, int ratingsSize){
    int left[ratingsSize];
    for(int i=0;i<ratingsSize;i++)
    {
        if(i>0 && ratings[i]>ratings[i-1])
        {
            left[i]=left[i-1]+1;
        }
        else
        {
            left[i]=1;
        }
    }
    int right=0,ret=0;
    for(int i=ratingsSize-1;i>=0;i--)
    {
        if(i<ratingsSize-1 && ratings[i]>ratings[i+1])
        {
            right++;
        }
        else
        {
            right=1;
        }
        ret+=fmax(left[i],right);
    }
    return ret;
}

把所有孩子的糖果数初始化为 1；

先从左往右遍历一遍，如果右边孩子的评分比左边的高，则右边孩子的糖果数更新为左边孩子的

糖果数加 1；再从右往左遍历一遍，如果左边孩子的评分比右边的高，且左边孩子当前的糖果数

不大于右边孩子的糖果数，则左边孩子的糖果数更新为右边孩子的糖果数加 1。通过这两次遍历，

分配的糖果就可以满足题目要求了。这里的贪心策略即为，在每次遍历中，只考虑并更新相邻一

侧的大小关系。
